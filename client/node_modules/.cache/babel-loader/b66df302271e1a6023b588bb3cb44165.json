{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { capitalize } from '../utils/helpers';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 'none',\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    }\n  }\n};\nvar Link = React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"color\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  return React.createElement(Typography, _extends({\n    className: clsx(classes.root, component === 'button' && classes.button, classes[\"underline\".concat(capitalize(underline))], className),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    ref: ref,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['default', 'error', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * `classes` property applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   *  Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","map":{"version":3,"sources":["/Users/glennsheppard/Development/React/jobs/client/node_modules/@material-ui/core/esm/Link/Link.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","capitalize","withStyles","Typography","styles","root","underlineNone","textDecoration","underlineHover","underlineAlways","button","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","Link","forwardRef","props","ref","classes","className","_props$component","component","_props$color","color","TypographyClasses","_props$underline","underline","_props$variant","variant","other","createElement","concat","process","env","NODE_ENV","propTypes","children","node","isRequired","object","string","oneOf","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { capitalize } from '../utils/helpers';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 'none',\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    }\n  }\n};\nvar Link = React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"color\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  return React.createElement(Typography, _extends({\n    className: clsx(classes.root, component === 'button' && classes.button, classes[\"underline\".concat(capitalize(underline))], className),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    ref: ref,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['default', 'error', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * `classes` property applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   *  Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);"]},"metadata":{},"sourceType":"module"}