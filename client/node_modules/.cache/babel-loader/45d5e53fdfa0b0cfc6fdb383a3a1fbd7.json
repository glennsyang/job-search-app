{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Styles applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      backgroundColor: 'currentcolor',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      opacity: 0,\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);","map":{"version":3,"sources":["/Users/glennsheppard/Development/React/jobs/client/node_modules/@material-ui/core/esm/CardActionArea/CardActionArea.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","ButtonBase","styles","theme","root","display","textAlign","width","opacity","palette","action","hoverOpacity","focusVisible","focusHighlight","pointerEvents","position","backgroundColor","top","right","bottom","left","transition","transitions","create","duration","short","CardActionArea","forwardRef","props","ref","children","classes","className","focusVisibleClassName","other","createElement","process","env","NODE_ENV","propTypes","node","object","isRequired","string","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      textAlign: 'inherit',\n      width: '100%',\n      '&:hover $focusHighlight': {\n        opacity: theme.palette.action.hoverOpacity\n      },\n      '&$focusVisible $focusHighlight': {\n        opacity: 0.12\n      }\n    },\n\n    /* Styles applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: {},\n\n    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: {\n      pointerEvents: 'none',\n      position: 'absolute',\n      backgroundColor: 'currentcolor',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      opacity: 0,\n      transition: theme.transitions.create('opacity', {\n        duration: theme.transitions.duration.short\n      })\n    }\n  };\n};\nvar CardActionArea = React.forwardRef(function CardActionArea(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      focusVisibleClassName = props.focusVisibleClassName,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"focusVisibleClassName\"]);\n\n  return React.createElement(ButtonBase, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref\n  }, other), children, React.createElement(\"span\", {\n    className: classes.focusHighlight\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActionArea'\n})(CardActionArea);"]},"metadata":{},"sourceType":"module"}