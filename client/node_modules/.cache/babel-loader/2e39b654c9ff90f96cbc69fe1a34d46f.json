{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","map":{"version":3,"sources":["/Users/glennsheppard/Development/React/jobs/client/node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","withStyles","styles","theme","root","minWidth","color","palette","action","active","flexShrink","display","ListItemIcon","forwardRef","props","ref","classes","className","other","createElement","process","env","NODE_ENV","propTypes","children","element","isRequired","object","string","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,wBAAP,MAAqC,gDAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAO,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACzC,SAAO;AACL;AACAC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,KAAK,EAAEH,KAAK,CAACI,OAAN,CAAcC,MAAd,CAAqBC,MAFxB;AAGJC,MAAAA,UAAU,EAAE,CAHR;AAIJC,MAAAA,OAAO,EAAE;AAJL;AAFD,GAAP;AASD,CAVM;AAWP;;;;AAIA,IAAIC,YAAY,GAAGd,KAAK,CAACe,UAAN,CAAiB,SAASD,YAAT,CAAsBE,KAAtB,EAA6BC,GAA7B,EAAkC;AACpE,MAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;AAAA,MACIC,SAAS,GAAGH,KAAK,CAACG,SADtB;AAAA,MAEIC,KAAK,GAAGrB,wBAAwB,CAACiB,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,CAAR,CAFpC;;AAIA,SAAOhB,KAAK,CAACqB,aAAN,CAAoB,KAApB,EAA2BvB,QAAQ,CAAC;AACzCqB,IAAAA,SAAS,EAAEjB,IAAI,CAACgB,OAAO,CAACZ,IAAT,EAAea,SAAf,CAD0B;AAEzCF,IAAAA,GAAG,EAAEA;AAFoC,GAAD,EAGvCG,KAHuC,CAAnC,CAAP;AAID,CATkB,CAAnB;AAUAE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,YAAY,CAACW,SAAb,GAAyB;AAC/D;;;;AAIAC,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,OAAV,CAAkBC,UALmC;;AAO/D;;;;AAIAV,EAAAA,OAAO,EAAEjB,SAAS,CAAC4B,MAAV,CAAiBD,UAXqC;;AAa/D;;;AAGAT,EAAAA,SAAS,EAAElB,SAAS,CAAC6B;AAhB0C,CAAjE,GAiBI,KAAK,CAjBT;AAkBA,eAAe3B,UAAU,CAACC,MAAD,EAAS;AAChC2B,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZjB,YAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  return React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"]},"metadata":{},"sourceType":"module"}