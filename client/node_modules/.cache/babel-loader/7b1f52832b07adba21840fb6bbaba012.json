{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport withWidth, { isWidthDown, isWidthUp } from '../withWidth';\nimport { exactProp } from '@material-ui/utils';\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  var children = props.children,\n      only = props.only,\n      width = props.width;\n  var visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (var i = 0; i < only.length; i += 1) {\n        var breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (var _i = 0; _i < breakpointKeys.length; _i += 1) {\n      var _breakpoint = breakpointKeys[_i];\n      var breakpointUp = props[\"\".concat(_breakpoint, \"Up\")];\n      var breakpointDown = props[\"\".concat(_breakpoint, \"Down\")];\n\n      if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this property when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use an heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);","map":{"version":3,"sources":["/Users/glennsheppard/Development/React/jobs/client/node_modules/@material-ui/core/esm/Hidden/HiddenJs.js"],"names":["PropTypes","keys","breakpointKeys","withWidth","isWidthDown","isWidthUp","exactProp","HiddenJs","props","children","only","width","visible","Array","isArray","i","length","breakpoint","_i","_breakpoint","breakpointUp","concat","breakpointDown","propTypes","node","className","string","implementation","oneOf","initialWidth","lgDown","bool","lgUp","mdDown","mdUp","oneOfType","arrayOf","smDown","smUp","isRequired","xlDown","xlUp","xsDown","xsUp","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { keys as breakpointKeys } from '../styles/createBreakpoints';\nimport withWidth, { isWidthDown, isWidthUp } from '../withWidth';\nimport { exactProp } from '@material-ui/utils';\n/**\n * @ignore - internal component.\n */\n\nfunction HiddenJs(props) {\n  var children = props.children,\n      only = props.only,\n      width = props.width;\n  var visible = true; // `only` check is faster to get out sooner if used.\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (var i = 0; i < only.length; i += 1) {\n        var breakpoint = only[i];\n\n        if (width === breakpoint) {\n          visible = false;\n          break;\n        }\n      }\n    } else if (only && width === only) {\n      visible = false;\n    }\n  } // Allow `only` to be combined with other props. If already hidden, no need to check others.\n\n\n  if (visible) {\n    // determine visibility based on the smallest size up\n    for (var _i = 0; _i < breakpointKeys.length; _i += 1) {\n      var _breakpoint = breakpointKeys[_i];\n      var breakpointUp = props[\"\".concat(_breakpoint, \"Up\")];\n      var breakpointDown = props[\"\".concat(_breakpoint, \"Down\")];\n\n      if (breakpointUp && isWidthUp(_breakpoint, width) || breakpointDown && isWidthDown(_breakpoint, width)) {\n        visible = false;\n        break;\n      }\n    }\n  }\n\n  if (!visible) {\n    return null;\n  }\n\n  return children;\n}\n\nHiddenJs.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   */\n  implementation: PropTypes.oneOf(['js', 'css']),\n\n  /**\n   * You can use this property when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use an heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  lgDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  lgUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  mdDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  mdUp: PropTypes.bool,\n\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only: PropTypes.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']), PropTypes.arrayOf(PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  smDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  smUp: PropTypes.bool,\n\n  /**\n   * @ignore\n   * width prop provided by withWidth decorator.\n   */\n  width: PropTypes.string.isRequired,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xlDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xlUp: PropTypes.bool,\n\n  /**\n   * If true, screens this size and down will be hidden.\n   */\n  xsDown: PropTypes.bool,\n\n  /**\n   * If true, screens this size and up will be hidden.\n   */\n  xsUp: PropTypes.bool\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  HiddenJs.propTypes = exactProp(HiddenJs.propTypes);\n}\n\nexport default withWidth()(HiddenJs);"]},"metadata":{},"sourceType":"module"}