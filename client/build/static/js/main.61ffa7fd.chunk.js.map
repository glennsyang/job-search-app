{"version":3,"sources":["Job.js","JobModal.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["ONE_DAY_MS","getMDY","ts","toDateString","split","slice","join","Job","job","onClick","Paper","className","Typography","variant","title","company","location","timestamp","dateStr","Date","todayStr","yesterdayStr","now","makeDate","created_at","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","open","handleClose","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","src","company_logo","DialogContent","DialogContentText","Chip","size","label","source","dangerouslySetInnerHTML","__html","description","DialogActions","Button","color","href","url","target","Jobs","jobs","useEffect","welcomeItem","document","querySelectorAll","delay","forEach","item","setTimeout","style","opacity","useState","setOpen","selectedJob","selectJob","numJobs","length","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","scrollToTop","c","documentElement","scrollTop","body","window","requestAnimationFrame","scrollTo","component","map","i","key","console","log","MobileStepper","steps","position","nextButton","prevActiveStep","disabled","backButton","JOB_API_URL","App","jobList","updateJobs","updateCb","a","async","fetch","res","json","fetchJobs","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61ffa7fd.chunk.js","sourcesContent":["import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\n\n// todo factor these into constants file\nconst ONE_DAY_MS = 24 * 3600 * 1000;\n\n// returns a date like Fri Jun 14\nfunction getMDY(ts) {\n    return ts.toDateString().split(' ').slice(0, 3).join(' ')\n}\n\n// makeDate takes a TS and returns a date like Fri Jun 14\n// if it's today or yesterday, it returns that instead\nfunction makeDate(timestamp) {\n    const date = new Date(timestamp);\n    const dateStr = getMDY(date);\n    const todayStr = getMDY(new Date());\n    const yesterdayStr = getMDY(new Date(Date.now() - ONE_DAY_MS));\n    if (dateStr === todayStr) {\n        return 'today';\n    } else if (dateStr === yesterdayStr) {\n        return 'yesterday';\n    } else {\n        return dateStr;\n    }\n}\n\nexport default function Job({ job, onClick }) {\n    return (\n        <Paper onClick={onClick} className='job'>\n            <div className=\"flex-align-mid\">\n                <div className=\"job-title-location\">\n                    <Typography variant=\"h6\">{job.title}</Typography>\n                    <Typography variant=\"h5\">{job.company}</Typography>\n                    <Typography>{job.location}</Typography>\n                </div>\n            </div>\n            <div className=\"flex-align-mid\">\n                <Typography>{makeDate(job.created_at)}</Typography>\n            </div>\n        </Paper>\n    );\n}","import React from 'react'\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Chip from '@material-ui/core/Chip';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function JobModal({ job, open, handleClose }) {\n\n    if (!job.title) {\n        return <div />\n    }\n\n    return (\n        <div>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">\n                    {job.title} -\n                    {job.company}\n                    <img className={'detail-logo'} src={job.company_logo} />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText\n                        id=\"alert-dialog-slide-description\">\n                        <Chip size=\"small\" label={`from ${job.source}`} />\n                    </DialogContentText>\n                    <DialogContentText\n                        id=\"alert-dialog-slide-description\"\n                        dangerouslySetInnerHTML={{ __html: job.description }}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Close\n                    </Button>\n                    <a href={job.url} target=\"_blank\">\n                        <Button color=\"primary\">\n                            Apply\n                        </Button>\n                    </a>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Job from './Job';\nimport JobModal from './JobModal';\nimport MobileStepper from '@material-ui/core/MobileStepper';\nimport Button from '@material-ui/core/Button';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\n\nexport default function Jobs({ jobs }) {\n\n    React.useEffect(() => {\n        const welcomeItem = document.querySelectorAll('.welcome-item');\n        let delay = 0;\n        welcomeItem.forEach(item => {\n            setTimeout(() => item.style.opacity = 1, delay);\n            delay += 500;\n        })\n    }, []);\n\n    // modal\n    const [open, setOpen] = React.useState(false);\n    const [selectedJob, selectJob] = React.useState({});\n    function handleClickOpen() {\n        setOpen(true);\n    }\n    function handleClose() {\n        setOpen(false);\n    }\n\n    // pagination\n    const numJobs = jobs.length;\n    const numPages = Math.ceil(numJobs / 20);\n    const [activeStep, setActiveStep] = React.useState(0);\n    const jobsOnPage = jobs.slice(activeStep * 20, (activeStep * 20) + 20);\n\n    function scrollToTop() {\n        const c = document.documentElement.scrollTop || document.body.scrollTop;\n        if (c > 0) {\n            window.requestAnimationFrame(scrollToTop);\n            window.scrollTo(0, c - c / 8);\n        }\n    };\n\n    function scrollToTop() {\n        const c = document.documentElement.scrollTop || document.body.scrollTop;\n        if (c > 0) {\n            window.requestAnimationFrame(scrollToTop);\n            window.scrollTo(0, c - c / 8);\n        }\n    };\n\n    function handleNext() {\n        setActiveStep(prevActiveStep => prevActiveStep + 1);\n        scrollToTop();\n    }\n\n    function handleBack() {\n        setActiveStep(prevActiveStep => prevActiveStep - 1);\n        scrollToTop();\n    }\n\n    return (\n        <div className=\"jobs\">\n            <JobModal open={open} job={selectedJob} handleClose={handleClose} />\n            <Typography variant=\"h4\" component=\"h1\">\n                Entry Level Software Jobs\n            </Typography>\n            <Typography variant=\"h6\" component=\"h2\">\n                Found {numJobs} Jobs\n            </Typography>\n            {\n                jobsOnPage.map(\n                    (job, i) => <Job key={i} job={job} onClick={() => {\n                        console.log('clicked')\n                        handleClickOpen();\n                        selectJob(job)\n                    }} />\n                )\n            }\n            <div>\n                Page {activeStep + 1} of {numPages}\n            </div>\n            <MobileStepper\n                variant=\"progress\"\n                steps={numPages}\n                position=\"static\"\n                activeStep={activeStep}\n                nextButton={\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === numJobs - 1}>\n                        Next\n                    <KeyboardArrowRight />\n                    </Button>\n                }\n                backButton={\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                        <KeyboardArrowLeft />\n                        Back\n                    </Button>\n                }\n            />\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\n\nimport Jobs from \"./Jobs\";\n\nconst JOB_API_URL = \"/api/jobs\";\n\nasync function fetchJobs(updateCb) {\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCb(json);\n}\n\nfunction App() {\n\n  const [jobList, updateJobs] = React.useState([]);\n\n  React.useEffect(() => {\n    fetchJobs(updateJobs);\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <Jobs jobs={jobList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}